# Task ID: 15
# Title: Create Dockerfile and Deployment Documentation
# Status: pending
# Dependencies: 9, 11
# Priority: low
# Description: Prepare a Dockerfile for containerized deployment and create documentation for running the server and client.
# Details:
1. Create a Dockerfile in the project root
2. Create a docker-compose.yml file for easy deployment
3. Write a README.md with setup and usage instructions
4. Document API endpoints and example requests

```dockerfile
# Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm install

# Copy source code
COPY tsconfig.json ./
COPY src ./src

# Build TypeScript
RUN npm run build

# Expose port
EXPOSE 3000

# Start server
CMD ["node", "dist/server/index.js"]
```

```yaml
# docker-compose.yml
version: '3'

services:
  mcp-server:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
```

```markdown
# MCP Stateful Server & Client

A minimal, fully MCP-compliant server and client setup for exploring and validating session-based tool invocation workflows using the [Model Context Protocol (MCP)](https://modelcontext.org).

## Features

- Toy Stateful MCP Server with session handling
- Two test tools: `imagine` and `reveal`
- Fully compliant integration test client
- Wire protocol inspector for debugging

## Getting Started

### Prerequisites

- Node.js 18 or higher
- npm or yarn

### Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/mcp-stateful-example.git
cd mcp-stateful-example

# Install dependencies
npm install
```

### Running the Server

```bash
npm run start:server
```

The server will start on http://localhost:3000.

### Running the Test Client

```bash
npm run start:client
```

### Running the Integration Test Suite

```bash
npm run test:integration
```

## Docker Deployment

```bash
docker-compose up -d
```

## API Documentation

### MCP Endpoint: `/mcp`

- `POST /mcp` - Accepts JSON-RPC requests
- `GET /mcp` - Streams responses as SSE
- `DELETE /mcp` - Terminates session

### Available Tools

- `imagine` - Generates and stores random data
- `reveal` - Returns data generated by `imagine`

## Example Requests

### Initialize Session

```json
{
  "jsonrpc": "2.0",
  "method": "initialize",
  "params": {},
  "id": 1
}
```

### List Tools

```json
{
  "jsonrpc": "2.0",
  "method": "tools/list",
  "params": {},
  "id": 2
}
```

### Call Imagine Tool

```json
{
  "jsonrpc": "2.0",
  "method": "tools/call",
  "params": {
    "name": "imagine",
    "parameters": {
      "type": "string",
      "length": 10
    }
  },
  "id": 3
}
```

### Call Reveal Tool

```json
{
  "jsonrpc": "2.0",
  "method": "tools/call",
  "params": {
    "name": "reveal",
    "parameters": {
      "format": "json"
    }
  },
  "id": 4
}
```
```

# Test Strategy:
Verify that the Dockerfile builds successfully and that the containerized application runs correctly. Test the docker-compose setup to ensure that it properly configures and starts the server. Review the documentation to ensure that it accurately describes the setup and usage of the server and client.
